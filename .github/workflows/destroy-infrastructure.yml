name: Destroy AWS Resources

on:
  workflow_dispatch:

jobs:
  destroy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Destroy Resources
        run: |
          set -e
          
          # Function to delete resources by name pattern
          delete_resources_by_pattern() {
            local resource_type=$1
            local name_pattern=$2
            local delete_command=$3
            local list_command=$4

            echo "Deleting $resource_type resources with name pattern $name_pattern"
            while true; do
              resources=$(eval "$list_command")
              if [[ -z "$resources" ]]; then
                echo "No $resource_type resources found with name pattern $name_pattern"
                break
              fi

              for resource in $resources; do
                echo "Deleting $resource_type resource: $resource"
                eval "$delete_command $resource"
              done
            done
          }

          # Delete Cloudfront distributions
          delete_resources_by_pattern "Cloudfront" "Group-3" "aws cloudfront delete-distribution --id" "aws cloudfront list-distributions --query 'DistributionList.Items[?contains(Id, \`Group-3\`)].Id' --output text"

          # Delete S3 buckets
          delete_resources_by_pattern "S3 bucket" "Group-3" "aws s3 rb s3://" "aws s3api list-buckets --query 'Buckets[?contains(Name, \`Group-3\`)].Name' --output text"

          # Delete ACM certificates
          delete_resources_by_pattern "ACM certificate" "Group-3" "aws acm delete-certificate --certificate-arn" "aws acm list-certificates --query 'CertificateSummaryList[?contains(CertificateArn, \`Group-3\`)].CertificateArn' --output text"

          # Delete NAT gateways
          delete_resources_by_pattern "NAT gateway" "Group-3" "aws ec2 delete-nat-gateway --nat-gateway-id" "aws ec2 describe-nat-gateways --query 'NatGateways[?contains(NatGatewayId, \`Group-3\`)].NatGatewayId' --output text"

          # Delete VPC endpoints
          delete_resources_by_pattern "VPC endpoint" "Group-3" "aws ec2 delete-vpc-endpoints --vpc-endpoint-ids" "aws ec2 describe-vpc-endpoints --query 'VpcEndpoints[?contains(VpcEndpointId, \`Group-3\`)].VpcEndpointId' --output text"

          # Delete ECS task definitions
          delete_resources_by_pattern "ECS task definition" "Group-3" "aws ecs deregister-task-definition --task-definition" "aws ecs list-task-definitions --query 'taskDefinitionArns[?contains(@, \`Group-3\`)]' --output text"

          # Delete ECS services
          delete_resources_by_pattern "ECS service" "Group-3" "aws ecs delete-service --cluster Group-3-ecs-cluster --service" "aws ecs list-services --cluster Group-3-ecs-cluster --query 'serviceArns[?contains(@, \`Group-3\`)]' --output text"

          # Delete ECS clusters
          delete_resources_by_pattern "ECS cluster" "Group-3" "aws ecs delete-cluster --cluster" "aws ecs list-clusters --query 'clusterArns[?contains(@, \`Group-3\`)]' --output text"

          # Delete ECR repositories
          delete_resources_by_pattern "ECR repository" "Group-3" "aws ecr delete-repository --repository-name" "aws ecr describe-repositories --query 'repositories[?contains(repositoryName, \`Group-3\`)].repositoryName' --output text"

          # Delete Cloudwatch log groups
          delete_resources_by_pattern "Cloudwatch log group" "Group-3" "aws logs delete-log-group --log-group-name" "aws logs describe-log-groups --query 'logGroups[?contains(logGroupName, \`Group-3\`)].logGroupName' --output text"

          # Delete IAM roles
          delete_resources_by_pattern "IAM role" "Group-3" "aws iam delete-role --role-name" "aws iam list-roles --query 'Roles[?contains(RoleName, \`Group-3\`)].RoleName' --output text"

          # Delete Load Balancer listeners
          delete_resources_by_pattern "Load Balancer listener" "Group-3" "aws elbv2 delete-listener --listener-arn" "aws elbv2 describe-listeners --query 'Listeners[?contains(ListenerArn, \`Group-3\`)].ListenerArn' --output text"

          # Delete Load Balancer target groups
          delete_resources_by_pattern "Load Balancer target group" "Group-3" "aws elbv2 delete-target-group --target-group-arn" "aws elbv2 describe-target-groups --query 'TargetGroups[?contains(TargetGroupArn, \`Group-3\`)].TargetGroupArn' --output text"

          # Delete Load Balancers
          delete_resources_by_pattern "Load Balancer" "Group-3" "aws elbv2 delete-load-balancer --load-balancer-arn" "aws elbv2 describe-load-balancers --query 'LoadBalancers[?contains(LoadBalancerArn, \`Group-3\`)].LoadBalancerArn' --output text"

          # Delete Internet Gateways
          delete_resources_by_pattern "Internet Gateway" "Group-3" "aws ec2 delete-internet-gateway --internet-gateway-id" "aws ec2 describe-internet-gateways --query 'InternetGateways[?contains(InternetGatewayId, \`Group-3\`)].InternetGatewayId' --output text"

          # Delete Route tables
          delete_resources_by_pattern "Route table" "Group-3" "aws ec2 delete-route-table --route-table-id" "aws ec2 describe-route-tables --query 'RouteTables[?contains(RouteTableId, \`Group-3\`)].RouteTableId' --output text"

          # Delete Subnets
          delete_resources_by_pattern "Subnet" "Group-3" "aws ec2 delete-subnet --subnet-id" "aws ec2 describe-subnets --query 'Subnets[?contains(SubnetId, \`Group-3\`)].SubnetId' --output text"

          # Delete VPCs
          delete_resources_by_pattern "VPC" "Group-3" "aws ec2 delete-vpc --vpc-id" "aws ec2 describe-vpcs --query 'Vpcs[?contains(VpcId, \`Group-3\`)].VpcId' --output text"

          # Delete Security Groups
          delete_resources_by_pattern "Security Group" "Group-3" "aws ec2 delete-security-group --group-id" "aws ec2 describe-security-groups --query 'SecurityGroups[?contains(GroupId, \`Group-3\`)].GroupId' --output text"

          # Delete Route53 Records
          delete_resources_by_pattern "Route53 record" "Group-3" "aws route53 change-resource-record-sets --hosted-zone-id ${{ secrets.ROUTE53_ZONE_ID }} --change-batch" "aws route53 list-resource-record-sets --hosted-zone-id ${{ secrets.ROUTE53_ZONE_ID }} --query 'ResourceRecordSets[?contains(Name, \`Group-3\`)].Name' --output text"
