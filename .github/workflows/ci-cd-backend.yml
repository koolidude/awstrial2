name: CI/CD Pipeline for Backend

on:
  workflow_dispatch:
  push:
    branches:
      - prod
      - uat
      - dev
    paths:
      - 'backend/**'
      - 'infrastructure/terraform/backend/**'
  # pull_request:
  #   types: [closed]
  #   branches:
  #     - prod
  #     - uat
  #     - dev

jobs:
  build-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/src/requirements.txt

      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}/backend
        run: |
          python -m unittest discover -s backend/tests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create Terraform state S3 bucket if it does not exist
        run: |
          if ! aws s3api head-bucket --bucket group-3-terraform-state 2>/dev/null; then
            aws s3api create-bucket --bucket group-3-terraform-state --region us-east-1
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

      - name: Deploy infrastructure
        run: |
          cd infrastructure/terraform/backend
          terraform init \
          -backend-config="bucket=group-3-terraform-state" \
          -backend-config="key=group-3-terraform-state/terraform.tfstate" \
          -backend-config="region=us-east-1"
          terraform apply -auto-approve -var="branch_name=${{ github.ref_name }}" \
          -var="tmdb_api_key=${{ secrets.TMDB_API_KEY }}" \
          -var="secret_key=${{ secrets.SECRET_KEY }}" \
          -var "route53_zone_id=${{ secrets.ROUTE53_ZONE_ID }}"

      - name: Build Docker image
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
          docker build -t netflix_clone_backend .
          docker tag netflix_clone_backend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/group-3-ecr-repo-${{ github.ref_name }}:latest
        working-directory: backend
      
      - name: Run image scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'netflix_clone_backend:latest'
          format: 'table'
          # exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'MEDIUM,HIGH,CRITICAL'
          output: 'docker-image-scan.json'
      - name: Upload Docker Trivy Report
        uses: actions/upload-artifact@v4.3.0
        with:
          name: docker-image-scan
          path: docker-image-scan.json

      - name: Docker publish to ECR
        run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/group-3-ecr-repo-${{ github.ref_name }}:latest

      - name: Update ECS service
        run: |
          aws ecs update-service --cluster group-3-ecs-cluster-${{ github.ref_name }} --service group-3-ecs-service-${{ github.ref_name }} --force-new-deployment

      - name: Get ALB URL
        id: get-alb-url
        run: |
          alb_url=$(aws elbv2 describe-load-balancers --names group-3-alb-${{ github.ref_name }} --query 'LoadBalancers[0].DNSName' --output text)
          echo "::set-output name=alb_url::$alb_url"

      - name: Store ALB URL in Parameter Store
        run: |
          aws ssm put-parameter --name "/group-3/backend-alb-url" --value "${{ steps.get-alb-url.outputs.alb_url }}" --type "String" --overwrite

